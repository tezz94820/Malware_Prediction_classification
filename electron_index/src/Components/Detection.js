import React from "react";
import { useState, useEffect } from "react";
import { Link } from "react-router-dom";
import axios from 'axios';

const Detection = () => {
  const [predictDisabled, setPredictDisabled] = useState(true);
  const [predictLoader, setPredictLoader] = useState(false);
  const [malwareProbability, setMalwareProbability] = useState("");

  const handlePredictClicked = async () => {
    setPredictLoader(true);
    const response = await axios.get("http://localhost:3000/prediction");
    setPredictLoader(false);
    const malwarePredicted = response.data.predicted_value;
    setMalwareProbability(Math.round(malwarePredicted * 10000) / 100);
  };

  const handleGetConfigurations = () => {
    electron.batchApis.executeBatchFile();
  };

  useEffect(() => {
    // Define the callback function to handle the event data
    const handleExecuteBatchCompleted = (data) => {
      const { status } = data;
      if (status === "success") {
        setPredictDisabled(false);
      }
    };

    // Attach the event listener when the component mounts
    electron.batchApis.onExecuteBatchCompleted(handleExecuteBatchCompleted);

    // Clean up the event listener when the component unmounts
    return () => {
      electron.batchApis.onExecuteBatchCompleted(null);
    };
  }, []);

  return (
    <div className="relative bg-gradient-to-br from-pink-300 to-violet-600 h-screen ">

      <div className="absolute m-8">
        <Link to="/" className="text-white text-xl shadow-lg cursor-pointer">Go Back</Link>
      </div>

      <div className="flex flex-col gap-20 items-center justify-center h-screen w-screen">
        <div>
          <button
            className="btn rounded-full bg-transparent text-white font-bold tracking-widest hover:bg-transparent hover:border-white border-2 border-white"
            onClick={handleGetConfigurations}
          >
            Get System Configurations
          </button>
        </div>
        <div>
          {predictLoader ? (
            <span className="w-16 loading loading-spinner bg-blue-600 "></span>
          ) : (
            <button
              className="btn rounded-full bg-transparent text-white font-bold tracking-widest hover:bg-transparent hover:border-white border-2 border-white"
              onClick={handlePredictClicked}
              disabled={predictDisabled}
            >
              Predict
            </button>
          )}
        </div>

        {malwareProbability !== "" && (
          <div>
            <p className="text-white font-bold tracking-widest ">
              {" "}
              Malware Prediction Probability:&nbsp;
              <span className="text-blue-800 font-extrabold text-lg">
                {malwareProbability}
              </span>
            </p>
            <div className="mt-10">
              <span className="text-green-600 mr-2 font-extrabold text-lg tracking-widest">
                SAFE
              </span>
              <progress
                className={`progress w-56 bg-white ${
                  malwareProbability > 50
                    ? "progress-error"
                    : "progress-success"
                }`}
                value={malwareProbability}
                max="100"
              ></progress>
              <span className="text-red-600 ml-2 font-extrabold text-lg tracking-widest">
                Danger
              </span>
            </div>
          </div>
        )}
      </div>
    </div>
  );
};

export default Detection;
