import dask.dataframe as dd
import numpy as np
from sklearn.preprocessing import LabelEncoder
import pickle as pkl
from tqdm import tqdm
import sys
import pandas as pd


# Check if the script is running in a Jupyter environment
try:
    from IPython import get_ipython

    if get_ipython() is not None:
        # Use tqdm.notebook if in Jupyter notebook
        from tqdm.notebook import tqdm
except ImportError:
    # Fallback to standard tqdm if not in a Jupyter environment
    from tqdm import tqdm


dtype = {
        'MachineIdentifier':                                    'category',
        'ProductName':                                          'category',
        'EngineVersion':                                        'category',
        'AppVersion':                                           'category',
        'AvSigVersion':                                         'category',
        'IsBeta':                                               'int8',
        'RtpStateBitfield':                                     'float16',
        'IsSxsPassiveMode':                                     'int8',
        'DefaultBrowsersIdentifier':                            'float16',
        'AVProductStatesIdentifier':                            'float32',
        'AVProductsInstalled':                                  'float16',
        'AVProductsEnabled':                                    'float16',
        'HasTpm':                                               'int8',
        'CountryIdentifier':                                    'int16',
        'CityIdentifier':                                       'float32',
        'OrganizationIdentifier':                               'float16',
        'GeoNameIdentifier':                                    'float16',
        'LocaleEnglishNameIdentifier':                          'int8',
        'Platform':                                             'category',
        'Processor':                                            'category',
        'OsVer':                                                'category',
        'OsBuild':                                              'int16',
        'OsSuite':                                              'int16',
        'OsPlatformSubRelease':                                 'category',
        'OsBuildLab':                                           'category',
        'SkuEdition':                                           'category',
        'IsProtected':                                          'float16',
        'AutoSampleOptIn':                                      'int8',
        'PuaMode':                                              'category',
        'SMode':                                                'float16',
        'IeVerIdentifier':                                      'float16',
        'SmartScreen':                                          'category',
        'Firewall':                                             'float16',
        'UacLuaenable':                                         'float32',
        'Census_MDC2FormFactor':                                'category',
        'Census_DeviceFamily':                                  'category',
        'Census_OEMNameIdentifier':                             'float16',
        'Census_OEMModelIdentifier':                            'float32',
        'Census_ProcessorCoreCount':                            'float16',
        'Census_ProcessorManufacturerIdentifier':               'float16',
        'Census_ProcessorModelIdentifier':                      'float16',
        'Census_ProcessorClass':                                'category',
        'Census_PrimaryDiskTotalCapacity':                      'float32',
        'Census_PrimaryDiskTypeName':                           'category',
        'Census_SystemVolumeTotalCapacity':                     'float32',
        'Census_HasOpticalDiskDrive':                           'int8',
        'Census_TotalPhysicalRAM':                              'float32',
        'Census_ChassisTypeName':                               'category',
        'Census_InternalPrimaryDiagonalDisplaySizeInInches':    'float16',
        'Census_InternalPrimaryDisplayResolutionHorizontal':    'float16',
        'Census_InternalPrimaryDisplayResolutionVertical':      'float16',
        'Census_PowerPlatformRoleName':                         'category',
        'Census_InternalBatteryType':                           'category',
        'Census_InternalBatteryNumberOfCharges':                'float32',
        'Census_OSVersion':                                     'category',
        'Census_OSArchitecture':                                'category',
        'Census_OSBranch':                                      'category',
        'Census_OSBuildNumber':                                 'int16',
        'Census_OSBuildRevision':                               'int32',
        'Census_OSEdition':                                     'category',
        'Census_OSSkuName':                                     'category',
        'Census_OSInstallTypeName':                             'category',
        'Census_OSInstallLanguageIdentifier':                   'float16',
        'Census_OSUILocaleIdentifier':                          'int16',
        'Census_OSWUAutoUpdateOptionsName':                     'category',
        'Census_IsPortableOperatingSystem':                     'int8',
        'Census_GenuineStateName':                              'category',
        'Census_ActivationChannel':                             'category',
        'Census_IsFlightingInternal':                           'float16',
        'Census_IsFlightsDisabled':                             'float16',
        'Census_FlightRing':                                    'category',
        'Census_ThresholdOptIn':                                'float16',
        'Census_FirmwareManufacturerIdentifier':                'float16',
        'Census_FirmwareVersionIdentifier':                     'float32',
        'Census_IsSecureBootEnabled':                           'int8',
        'Census_IsWIMBootEnabled':                              'float16',
        'Census_IsVirtualDevice':                               'float16',
        'Census_IsTouchEnabled':                                'int8',
        'Census_IsPenCapable':                                  'int8',
        'Census_IsAlwaysOnAlwaysConnectedCapable':              'float16',
        'Wdft_IsGamer':                                         'float16',
        'Wdft_RegionIdentifier':                                'float16',
        'HasDetections':                                        'int8',
        'Remaining_Disks_Capacity':                            'float32',
        'C_drive_capacity':                                      'float64',
        'gamer_with_firewall':                                   'int8',
        'gamer_protected':                                     'int8',
        'ram_by_processor':                                      'float32',
        'portable_os_protected':                                 'int8',
        'dimensions':                                            'category',
        'optical_drive_protected':                               'int8',
        'Connected_total_capacity':                              'float32',
        'optical_drive_protected' :                              'int8',
        'secure_boot_protected'   :                              'int8',
        'transformed_build_revision':                            'float32',
        'vertical_display_by_inches':                            'float64',
        }


def reduce_memory(data):
    ''' Reducing memory of data by changing datatype of column based on their min and max values '''

    for col in data:
        column_type = str(data[col].dtypes)
        types = ['int16','int32','int64','float16','float32','float64']
        if column_type in types:
            min_value = data[col].min()
            max_value = data[col].max()

            if column_type[:3] == 'int':
                if min_value > np.iinfo(np.int8).min and max_value < np.iinfo(np.int8).max:
                    data[col]=data[col].astype(np.int8)
                elif min_value > np.iinfo(np.int16).min and max_value < np.iinfo(np.int16).max:
                    data[col]=data[col].astype(np.int16)
                elif min_value > np.iinfo(np.int32).min and max_value < np.iinfo(np.int32).max:
                    data[col]=data[col].astype(np.int32)
                elif min_value > np.iinfo(np.int64).min and max_value < np.iinfo(np.int64).max:
                    data[col]=data[col].astype(np.int64)

            else:

                if min_value > np.finfo(np.float16).min and max_value < np.finfo(np.float16).max:
                    data[col]=data[col].astype(np.float16)
                elif min_value > np.finfo(np.float32).min and max_value < np.finfo(np.float32).max:
                    data[col]=data[col].astype(np.float32)
                else:

                    data[col]=data[col].astype(np.float64)
    return data

def frequency_encoding(feature,data):
    ''' function to encode features based on frequency encoding'''
    encoded_dict = data[feature].value_counts().to_dict()

    return encoded_dict

def encode_categorical_features(final_data,frequency_encoded_features,final_categorical_features):
    ''' encoding categorical features based on frequency encoding and label encoding'''

    for i in tqdm(frequency_encoded_features, file=sys.stdout):
        encoded_values = frequency_encoding(i,final_data)
        final_data[i] = final_data[i].map(lambda x : encoded_values.get(str(x),0))
        final_data[i] = final_data[i].astype('int64')
    for i in tqdm(final_categorical_features):
        le = LabelEncoder()
        final_data[i] = le.fit_transform(final_data[i])
        final_data[i] = final_data[i].astype('int64')
    return final_data


# Load the trained model
with open("lightgbm_best_model_3.pkl", 'rb') as file:
    clf = pkl.load(file)

test_data = dd.read_csv('train_data_30.csv',dtype=dtype)
test_data = test_data.compute()
test_data = reduce_memory(test_data)
test_data = test_data.iloc[9:10].copy()

binary_features = list(np.load('binary_features_after_analysis.npz')['arr_0'])
numerical_features = list(np.load('numerical_features_after_analysis.npz')['arr_0'])
categorical_features = list(np.load('categorical_features_after_analysis.npz')['arr_0'])
frequency_encoded_features = ['AppVersion','AvSigVersion','Census_OSVersion','OsVer','EngineVersion','OsBuildLab']
final_categorical_features = list(set(categorical_features) - set(frequency_encoded_features))
test_data = encode_categorical_features(test_data,frequency_encoded_features,final_categorical_features)
test_data.replace([np.inf, -np.inf], np.finfo(np.float32).min, inplace=True)

identifier = [x for x in range(0, 1)]
real = test_data['HasDetections']
test = test_data.drop(columns=['HasDetections'])
predictions = clf.predict_proba(test)[:,1]
final_prediction = pd.DataFrame({'MachineIdentifier' :  identifier,'Probabilities' : predictions, 'real': real})
print(final_prediction.Probabilities.values[0])


sys.stdout = open("result.txt", "w")
print(final_prediction.Probabilities.values[0])
# Restore the standard output
sys.stdout = sys.__stdout__