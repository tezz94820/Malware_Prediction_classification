import express from 'express';
import { spawn } from 'child_process';
import cors from 'cors';
import fs from 'fs';

const app = express();

app.use(cors());
app.use(express.json());
app.use(express.urlencoded({ extended: true }));

app.get('/prediction', (req, res) => {
    console.log('prediction is hit');
    // Spawn a child process to run the predict.py script
    const pythonProcess = spawn('python', ['predict.py']);

    // Handle errors and completion of the Python script
    pythonProcess.on('error', (err) => {
        console.error('Error executing Python script:', err.message);
        res.status(500).json({ error: 'Internal Server Error' });
    });

    pythonProcess.on('close', (code) => {
        if (code == 0) {
            // Read the content of the result.txt file
            const resultFilePath = 'result.txt';
            // Check if the file exists before reading
            if (fs.existsSync(resultFilePath)) {
                const resultData = fs.readFileSync(resultFilePath, 'utf8').trim();
                // Parse the result from the Python script
                const predictedValue = parseFloat(resultData);
                // Send the result back to the client
                res.status(200).json({ predicted_value:predictedValue });
            }
        } else {
            console.error(`Python script exited with code ${code}`);
            res.status(500).json({ error: 'Internal Server Error' });
        }
    });
});




app.post('/prediction_classification', (req, res) => {
    console.log('classification is hit');
    // Spawn a child process to run the predict.py script
    const folderName = req.body.folder_name;
    const pythonProcess = spawn('python', ['predict_classification.py', folderName]);

    // Handle errors and completion of the Python script
    pythonProcess.on('error', (err) => {
        console.error('Error executing Python script:', err.message);
        res.status(500).json({ error: 'Internal Server Error' });
    });

    pythonProcess.on('close', (code) => {
        if (code == 0) {
            // Read the content of the result.txt file
            const resultFilePath = 'result_classification.txt';
            // Check if the file exists before reading
            if (fs.existsSync(resultFilePath)) {
                let resultData = fs.readFileSync(resultFilePath, 'utf8').trim().split('\n');
                // Parse the result from the Python script
                // const predictedValue = parseFloat(resultData);
                // Send the result back to the client
                resultData = resultData.map( item => JSON.parse(item));
                res.status(200).json({ resultData  });
            }
        } else {
            console.error(`Python script exited with code ${code}`);
            res.status(500).json({ error: 'Internal Server Error' });
        }
    });
});




app.listen(3000, () => {
    console.log(`Server started on port 3000`);
});
